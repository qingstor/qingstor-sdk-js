{{- define "RenderInputValidation"}}
    {{- $belongs := index . 0}}
    {{- $operation := index . 1}}
    {{- $request := $operation.Request}}
    {{- $customizedTypes := index . 2}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}
    {{- if ne $belongs "QingStor"}}
    this.{{$opID | camelCase | lowerFirst}}Validate = function(operation){
    {{- end}}
    {{- if eq $belongs "QingStor"}}
    this.{{$operation.ID | camelCase | lowerFirst}}Validate = function(operation){
    {{- end}}
    {{- $i := passThrough "operation['params']" $request.Params $customizedTypes}}
    {{- template "RenderCustomizedTypeValidation" $i}}
    {{- $i := passThrough "operation['headers']" $request.Headers $customizedTypes}}
    {{- template "RenderCustomizedTypeValidation" $i}}
    {{- $i := passThrough "operation['elements']" $request.Elements $customizedTypes}}
    {{- template "RenderCustomizedTypeValidation" $i}}
    };
{{- end}}


{{- define "RenderCustomizedTypeValidation"}}
    {{- $prefix := index . 0}}
    {{- $customizedType := index . 1}}
    {{- $customizedTypes := index . 2}}

    {{- range $_, $property := $customizedType.Properties}}
        {{- if eq $property.Type "object"}}
        if({{$prefix}}.hasOwnProperty('{{$property.ID}}')){
        {{- $nextPrefix := printf "%s[\"%s\"]" $prefix $property.ID}}
        {{- $nextCustomizedType := index $customizedTypes $property.ExtraType}}
        {{- $x := passThrough $nextPrefix $nextCustomizedType $customizedTypes}}
        {{- template "RenderCustomizedTypeValidation" $x}}
        }
        {{- if $property.IsRequired }}
        if(!{{$prefix}}.hasOwnProperty('{{$property.ID}}')) {
            throw new SDKError.ParameterRequired('{{$property.ID}}', '{{$customizedType.ID}}');
        }
    {{- end}}
    {{- else if eq $property.Type "array"}}
        {{- if $property.IsRequired}}
        if (!{{$prefix}}.hasOwnProperty('{{$property.ID}}') || _.isNull({{$prefix}}['{{$property.ID}}'])) {
            throw new SDKError.ParameterRequired('{{$property.ID}}', '{{$customizedType.ID}}');
        }
    {{- end}}
    {{- $isNotString := ne $property.ExtraType "string"}}
    {{- $isNotInteger := ne $property.ExtraType "integer"}}
    {{- $isNotTimestamp := ne $property.ExtraType "timestamp"}}
    {{- if and $isNotString $isNotInteger $isNotTimestamp}}
    {{$prefix}}['{{$property.ID}}'].forEach(function (value) {
        {{- $nextCustomizedType := index $customizedTypes $property.ExtraType}}
        {{- $i := passThrough "value" $nextCustomizedType $customizedTypes}}
        {{- template "RenderCustomizedTypeValidation" $i}}
    });
    {{- end}}
    {{- else}}
    {{- $isContentLength := eq $property.ID "Content-Length"}}
    {{- if not $isContentLength}}
    {{- if $property.IsRequired}}
    if(!{{$prefix}}.hasOwnProperty('{{$property.ID}}')||_.isNull({{$prefix}}['{{$property.ID}}'])){
        throw new SDKError.ParameterRequired('{{$property.ID}}', '{{$customizedType.ID}}');
    }
    {{- end}}
    {{- if gt ($property.Enum | len) 0}}
    if(!{{$prefix}}.hasOwnProperty('{{$property.ID}}') || _.isNull({{$prefix}}['{{$property.ID}}'])){
        var {{$property.ID | snakeCase}}_valid_values = [{{$property.Enum | commaConnectedWithQuote}}];
        if(_.includes({{$property.ID | snakeCase}}_valid_values, {{$prefix}}['{{$property.ID}}'])){
            throw new SDKError.ParameterValueNotAllowedError(
            '{{$property.ID}}',
            {{$prefix}}['{{$property.ID}}'],
            {{$property.ID}}_valid_values
            )
        }
    }
    {{- end}}
    {{- end}}
    {{- end}}
    {{- end}}
{{- end}}

{{define "BuildRequest"}}
    {{- $belongs := index . 0}}
    {{- $operation := index . 1}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}

    {{- $hasParams := gt (len $operation.Request.Params.Properties) 0}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0}}
    {{- $hasStringBody := eq $operation.Request.Body.Type "string"}}
    {{- $hasBinaryBody := eq $operation.Request.Body.Type "binary"}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}

    /**
     {{- if ne $belongs "QingStor"}}
     * {{$opID | camelCase | lowerFirst}}Request: Build {{$opID}}'s request
     {{- end}}
     {{- if eq $belongs "QingStor"}}
     * {{$operation.ID | camelCase | lowerFirst}}Request: Build {{$operation.ID}}'s request
     {{- end}}
     {{- if $operation.DocumentationURL}}
     * @link {{$operation.DocumentationURL}} Documentation URL
     {{- end}}
     {{- range $id, $property := $operation.Request.Headers.Properties}}
     * @param options['{{$property.ID}}'] {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Params.Properties}}
     * @param options['{{$property.ID}}'] {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Elements.Properties}}
     * @param options['{{$property.ID}}'] {{$property.Description}}
     {{- end}}
     *
     * @return Signer
     */
    {{- if ne $belongs "QingStor"}}
    this.{{$opID | camelCase | lowerFirst}}Request = function (
    {{- end}}
    {{- if eq $belongs "QingStor"}}
    this.{{$operation.ID | camelCase | lowerFirst}}Request = function (
    {{- end}}
        {{- if eq $belongs "Object"}}object_key{{end -}}
        {{- if and (eq $belongs "Object") $hasInput}},{{end -}}
        {{- if $hasInput}}options{{end -}}
        ) {
        {{- $uri := $operation.Request.URI}}
        {{- $uri := replace $uri "{" "<" -1}}
        {{- $uri := replace $uri "}" ">" -1}}
        {{- $uri := dashConnected $uri}}
        var operation = {
            'api': '{{$operation.ID}}',
            'method': '{{$operation.Request.Method}}',
            'uri': '{{$uri}}',
            'params': {
                {{range $id, $property := $operation.Request.Params.Properties}}'{{$property.Name}}': _.result(options,'{{$property.ID}}',''),
                {{end -}}
            },
            'headers': {
                {{- if ne $belongs "QingStor"}}
                'Host': properties.zone+'.'+config.host,
                {{- end}}
                {{- if eq $belongs "QingStor"}}
                'Host': config.host,
                {{- end}}
                {{range $id, $property := $operation.Request.Headers.Properties}}'{{$property.Name}}': _.result(options,'{{$property.ID}}',''),
                {{end -}}
            },
            'elements': {
                {{range $id, $property := $operation.Request.Elements.Properties}}'{{$property.Name}}': _.result(options,'{{$property.ID}}', ''),
                {{end -}}
            },
            {{- if ne $belongs "QingStor"}}
            'properties': properties,
            {{- end}}
            {{- if eq $belongs "QingStor"}}
            'properties': {},
            {{- end}}
            'body': {{if $operation.Request.Body.Type}}_.result(options,'body',''){{else}}undefined{{end}}
        };
        {{- if eq $belongs "Object"}}
        operation.properties['object-key'] = object_key;
        {{- end}}
        {{- if ne $belongs "QingStor"}}
        this.{{$opID | camelCase | lowerFirst}}Validate(operation);
        {{- end}}
        {{- if eq $belongs "QingStor"}}
        this.{{$operation.ID | camelCase | lowerFirst}}Validate(operation);
        {{- end}}
        return new Signer(
            new Builder(config, operation).parse(),
            config.access_key_id,
            config.secret_access_key
        );
    };
{{end}}

{{define "BuildNormalOperation"}}
    {{- $belongs := index . 0}}
    {{- $operation := index . 1}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}

    {{- $hasParams := gt (len $operation.Request.Params.Properties) 0}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0}}
    {{- $hasStringBody := eq $operation.Request.Body.Type "string"}}
    {{- $hasBinaryBody := eq $operation.Request.Body.Type "binary"}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}

    /**
     {{- if ne $belongs "QingStor"}}
     * {{$opID | camelCase | lowerFirst}}: {{$operation.Description}}
     {{- end}}
     {{- if eq $belongs "QingStor"}}
     * {{$operation.ID | camelCase | lowerFirst}}: {{$operation.Description}}
     {{- end}}
     {{- if $operation.DocumentationURL}}
     * @link {{$operation.DocumentationURL}} Documentation URL
     {{- end}}
     {{- range $id, $property := $operation.Request.Headers.Properties}}
     * @param options['{{$property.ID}}'] {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Params.Properties}}
     * @param options['{{$property.ID}}'] {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Elements.Properties}}
     * @param options['{{$property.ID}}'] {{$property.Description}}
     {{- end}}
     * @param callback Callback function
     *
     * @return none
     */
    {{- if ne $belongs "QingStor"}}
    this.{{$opID | camelCase | lowerFirst}} = function (
    {{- end}}
    {{- if eq $belongs "QingStor"}}
    this.{{$operation.ID | camelCase | lowerFirst}} = function (
    {{- end}}
        {{- if eq $belongs "Object"}}object_key,{{end -}}
        {{- if $hasInput}}options, {{end -}}callback) {
        {{- if ne $belongs "QingStor"}}
        var signer = this.{{$opID | camelCase | lowerFirst}}Request(
        {{- end}}
        {{- if eq $belongs "QingStor"}}
        var signer = this.{{$operation.ID | camelCase | lowerFirst}}Request(
        {{- end}}
            {{- if eq $belongs "Object"}}object_key{{end -}}
            {{- if and (eq $belongs "Object") $hasInput}},{{end -}}
            {{- if $hasInput}}options{{end -}});
        var retries = this.config.connection_retries;
        while (1) {
            try {
                {{- if ne $belongs "QingStor"}}
                logger.info('Sending QingStor request: {{$opID | camelCase | lowerFirst}}');
                {{- end}}
                {{- if eq $belongs "QingStor"}}
                logger.info('Sending QingStor request: {{$operation.ID | camelCase | lowerFirst}}');
                {{- end}}
                request(signer.sign(), function (err, res) {
                    callback && callback(err, Unpacker.unpack(res));
                });
            }
            catch (err) {
                logger.info(err);
                if (retries > 0) {
                    retries -= 1;
                } else {
                    throw new Error("Network Error");
                }
            }
            break;
        }
    };
{{end}}

{{define "BuildQueryOperation"}}
    {{- $belongs := index . 0}}
    {{- $operation := index . 1}}
    {{$opID := replace $operation.ID "Bucket" "" -1}}

    {{- $hasParams := gt (len $operation.Request.Params.Properties) 0}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0}}
    {{- $hasStringBody := eq $operation.Request.Body.Type "string"}}
    {{- $hasBinaryBody := eq $operation.Request.Body.Type "binary"}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}

    /**
     {{- if ne $belongs "QingStor"}}
     * {{$opID | camelCase | lowerFirst}}Query: {{$opID | camelCase}}'s Query Sign Way
     {{- end}}
     {{- if eq $belongs "QingStor"}}
     * {{$operation.ID | camelCase | lowerFirst}}Query: {{$operation.ID | camelCase}}'s Query Sign Way
     {{- end}}
     {{- if $operation.DocumentationURL}}
     * @link {{$operation.DocumentationURL}} Documentation URL
     {{- end}}
     {{- range $id, $property := $operation.Request.Headers.Properties}}
     * @param options['{{$property.ID}}'] {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Params.Properties}}
     * @param options['{{$property.ID}}'] {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Elements.Properties}}
     * @param options['{{$property.ID}}'] {{$property.Description}}
     {{- end}}
     * @param expires The time when this quert sign expires
     * @param callback Callback function
     *
     * @return none
     */
     {{- if ne $belongs "QingStor"}}
     this.{{$opID | camelCase | lowerFirst}}Query = function (
     {{- end}}
     {{- if eq $belongs "QingStor"}}
     this.{{$operation.ID | camelCase | lowerFirst}}Query = function (
     {{- end}}
        {{- if eq $belongs "Object"}}object_key,{{end -}}
        expires
        {{- if $hasInput}},options{{end -}}) {
         {{- if ne $belongs "QingStor"}}
         var signer = this.{{$opID | camelCase | lowerFirst}}Request(
         {{- end}}
         {{- if eq $belongs "QingStor"}}
         var signer = this.{{$operation.ID | camelCase | lowerFirst}}Request(
         {{- end}}
            {{- if eq $belongs "Object"}}object_key{{end -}}
            {{- if and (eq $belongs "Object") $hasInput}},{{end -}}
            {{- if $hasInput}}options{{end -}});
         return signer.query_sign(expires).uri;
    };
{{end}}

{{define "RenderOperation"}}
{{- $belongs := index . 0}}
{{- $operation := index . 1}}
{{- $customizedTypes := index . 2}}
{{- template "BuildRequest" passThrough $belongs $operation}}
{{- template "BuildNormalOperation" passThrough $belongs $operation}}
{{- template "BuildQueryOperation" passThrough $belongs $operation}}
{{- template "RenderInputValidation" passThrough $belongs $operation $customizedTypes}}
{{end}}
